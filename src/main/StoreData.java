package main;

import java.io.File;
import java.io.IOException;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Scanner;

import node.PeerNode;
import transport.Protocol;
import transport.TCPSender;
import transport.TCPServerThread;
import util.Config;
import util.Logger;
import util.Util;

public class StoreData extends PeerNode {

	private PeerNode queryNode;
	private static int hop = 0;

	public StoreData(String host, int port) {
		super(host, port);
	}

	public synchronized boolean transfer(PeerNode n, File file, String fileName, int key) {
		boolean check = false;
		try {
			String[] fileNames = fileName.split("/");
			fileName = fileNames[fileNames.length - 1];

			TCPSender sender = new TCPSender(n);
			sender.sendData(Protocol.FILE_TRANSFER_REQUEST, this, file, fileName, key);
			wait();
			check = true;
		} catch (IOException e) {
			Logger.error(StoreData.class, e.getMessage());
		} catch (InterruptedException e) {
			Logger.error(StoreData.class, e.getMessage());
		}

		if (check) {
			Logger.info(StoreData.class, "File has been stored on Node: " + n.getNickname());
		} else {
			Logger.error(StoreData.class, "File transmitission failed");
		}
		return check;
	}

	public PeerNode lookup(int key, PeerNode p) {
		PeerNode next = p;
		System.out.println("HOP: #" + hop);
		next.printNodeInfo();
		PeerNode[] ftNode = p.getFT();
		if (key == p.getID()) {
			hop++;
			return query(p);
		}
		if (isBetween(key, p.getID(), ftNode[1].getID(), false, false)) {
			next = query(ftNode[1]);
			hop++;
			return next;
		} else {
			for (int i = 0; i < ftNode.length - 1; i++) {
				if (isBetween(key, ftNode[i].getID(), ftNode[i + 1].getID(), true, false)
						&& ftNode[i].getID() != ftNode[i + 1].getID()) {
					next = query(ftNode[i]);
					hop++;
					return lookup(key, next);
				}
			}
			next = query(ftNode[ftNode.length - 1]);
			hop++;
			return lookup(key, next);
		}
	}

	public synchronized PeerNode getRand() {
		queryNode = null;
		try {
			TCPSender sender = new TCPSender(Config.DIS_HOST, Config.DIS_PORT);
			sender.sendData(Protocol.STORE_TO_DISCOVERY, this);
			wait();

		} catch (InterruptedException e) {
			Logger.error(StoreData.class, e.getMessage());
		} catch (IOException e) {
			Logger.error(StoreData.class, e.getMessage());
		}
		return queryNode;
	}

	public synchronized void sync(PeerNode p) {
		queryNode = p;
		notify();
	}

	public String toString() {
		return "[" + getHost() + "-" + getPort() + "]";
	}

	public static void main(String[] args) {

		// main.StoreData [PORT] 0 -- file key is generated by MD5 hash
		// main.StoreData [PORT] 1 -- file key is specified by argument
		if (args.length != 2) {
			Logger.error(Peer.class, "main.StoreData [PORT] [KEY]");
			System.exit(-1);
		}

		StoreData store = null;

		int port = Integer.parseInt(args[0]);

		try {
			String host = Util.getHostInetName();
			store = new StoreData(host, port);
			TCPServerThread serverThread = new TCPServerThread(store);
			serverThread.start();
			Logger.info(StoreData.class, store.toString() + " listening");
		} catch (UnknownHostException e) {
			Logger.error(store.getClass(), e.getMessage());
		} catch (IOException e) {
			Logger.error(store.getClass(), e.getMessage());
		}

		Scanner scan = new Scanner(System.in);
		System.out.println("Please enter file name: [q! for exit]\n");
		String fileName = scan.next();

		while (!fileName.equalsIgnoreCase("q!")) {

			File file = new File(fileName);

			if (!file.exists() || file.isDirectory()) {
				Logger.error(StoreData.class, "file doesn not exist\n");
			} else {

				// generate or specify file key
				int key = 0;

				if (args[1].equals("0")) {
					String rawFileKey = Util.generateFileKey(file);
					key = Integer.parseInt(rawFileKey, 16);
				}

				else if (args[1].equals("1")) {
					System.out.println("Please enter the key: \n");
					key = scan.nextInt();

					// if key is out of range
					if (key >= Math.pow(2, Config.ID_BIT_RANGE) || key < 0) {
						Logger.error(StoreData.class, "Invalid key, please enter your key:");
						key = scan.nextInt();
					}
				}

				// get random node
				PeerNode rand = store.query(store.getRand());
				System.out.println("\nRANDOM NODE:");
				rand.printNodeInfo();

				Logger.info(StoreData.class, "Key for file " + fileName + " is " + key);
				Logger.info(StoreData.class, "Looking for the most suitable node to store...\n");

				// look for the most suitable node
				PeerNode result = store.lookup(key, rand);
				System.out.println("RESULT NODE:");
				result.printNodeInfo();
				System.out.println("TOTAL HOPS: " + hop);
				hop = 0;

				// transfer file to result node
				boolean check = store.transfer(result, file, fileName, key);

			}
			System.out.println("\nPlease enter file name: [q! for exit]");
			fileName = scan.next();
		}

		System.exit(0);
	}

}
